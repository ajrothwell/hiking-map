(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[ "pvm_MglGeojsonLayer" ],{

  /***/ "./node_modules/@phila/vue-mapping/src/mapbox/layer/GeojsonLayer.js":
  /*!**************************************************************************!*\
  !*** ./node_modules/@phila/vue-mapping/src/mapbox/layer/GeojsonLayer.js ***!
  \**************************************************************************/
  /*! exports provided: default */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {

    "use strict";
    eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_layerEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/layerEvents */ \"./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js\");\n/* harmony import */ var _layerMixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layerMixin */ \"./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js\");\n\n\n\n// const markerDOMEvents = {\n//   click: \"click\",\n//   mouseenter: \"mouseenter\",\n//   mouseleave: \"mouseleave\",\n// };\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"GeojsonLayer\",\n  mixins: [ _layerMixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ],\n\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, { filter });\n        }\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [ this.layerId ],\n            filter,\n          });\n        }\n        return null;\n      };\n    },\n\n    getClusterExpansionZoom() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(zoom);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`),\n            );\n          }\n        });\n      };\n    },\n\n    getClusterChildren() {\n      return clusterId => {\n        return new Promise((resolve, reject) => {\n          const source = this.mapSource;\n          if (source) {\n            source.getClusterChildren(clusterId, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`),\n            );\n          }\n        });\n      };\n    },\n\n    getClusterLeaves() {\n      return (...args) => {\n        return new Promise((resolve, reject) => {\n          if (this.mapSource) {\n            this.mapSource.getClusterLeaves(...args, (err, features) => {\n              if (err) {\n                return reject(err);\n              }\n              return resolve(features);\n            });\n          } else {\n            return reject(\n              new Error(`Map source with id ${this.sourceId} not found.`),\n            );\n          }\n        });\n      };\n    },\n  },\n\n  created() {\n    // console.log('GeojsonLayer.js created is running, this.sourceId:', this.sourceId, 'this.source:', this.source, 'this.$store.map:', this.$store.map);\n    if (this.source) {\n      this.$watch(\n        \"source.data\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          let theSource = this.$store.map.getSource(this.$props.sourceId);\n          // console.log('GeojsonLayer watch source2, this.$store.map:', this.$store.map, 'theSource:', theSource);\n          if (theSource) {\n            theSource.setData(next);\n          }\n        },\n        { deep: true },\n      );\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      // console.log('GeojsonLayer.js $_deferredMount is running, this.map:', this.map, 'this.sourceId:', this.sourceId, 'this.source:', this.source);\n      // this.map = payload.map;\n      // console.log('$_deferredMount, this.map:', this.map);\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      if (this.source) {\n        const source = {\n          type: \"geojson\",\n          ...this.source,\n        };\n        try {\n          // console.log('try map.addSource is starting');\n          if (this.$props.layer.layout['icon-image']) {\n            this.map.loadImage(\n              this.$attrs.icon,\n              function(error, image) {\n                // console.log('inside loadImage, this.$props.layer.layout[icon-image]:', this.$props.layer.layout['icon-image'], 'image:', image, 'this.$attrs.icon:', this.$attrs.icon);\n                this.map.addImage(this.$props.layer.layout['icon-image'], image);\n              }.bind(this),\n            );\n          }\n          let sourcesAlreadyThere = Object.keys(this.map.style.sourceCaches);\n          if (!sourcesAlreadyThere.includes(this.sourceId)) {\n            this.map.addSource(this.sourceId, source);\n          }\n          // console.log('try map.addSource is ending');\n        } catch (err) {\n          console.log('catch err is running, err:', err);\n          if (this.replaceSource) {\n            this.map.removeSource(this.sourceId);\n            this.map.addSource(this.sourceId, source);\n          }\n        }\n      }\n      // console.log('GeojsonLayer.js $_deferredMount, about to $_addLayer');\n      this.$_addLayer();\n      // console.log('GeojsonLayer.js $_deferredMount, after $_addLayer');\n      this.$_bindLayerEvents(_lib_layerEvents__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n\n      // this.$_bindMarkerDOMEvents();\n      // console.log('GeojsonLayer.js $_addLayer is starting, this.layerId:', this.layerId);\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        // console.log('GeojsonLayer.js $_addLayer if existed is running');\n        if (this.replace) {\n          // console.log('if this.replace is true');\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      // console.log('GeojsonLayer.js $_addLayer is still running, this.layerId:', this.layerId);\n      const layer = {\n        // id: this.layerId,\n        source: this.sourceId,\n        ...this.layer,\n      };\n      layer.id = this.layerId;\n      // console.log('$_addLayer is still running, layer:', layer, 'this.before:', this.before);\n      this.map.addLayer(layer, this.before);\n      // console.log('$_addLayer after map.addLayer');\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n\n    // $_emitSelfEvent(event) {\n    //   this.$_emitMapEvent(event, { marker: this.marker });\n    // },\n    //\n    // $_bindMarkerDOMEvents() {\n    //   Object.keys(this.$listeners).forEach(key => {\n    //     if (Object.values(markerDOMEvents).includes(key)) {\n    //       this.marker._element.addEventListener(key, event => {\n    //         this.$_emitSelfEvent(event);\n    //       });\n    //     }\n    //   });\n    // },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = { id: featureId, source: this.source };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = { id: featureId, source: this.source };\n        return this.map.getFeatureState(params);\n      }\n    },\n\n    removeFeatureState(featureId, sourceLayer, key) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          sourceLayer,\n        };\n        return this.map.removeFeatureState(params, key);\n      }\n    },\n  },\n});\n\n\n//# sourceURL=webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/GeojsonLayer.js?");

    /***/ }),

}]);