{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/cyclomedia/Widget.vue?b86b","webpack:///node_modules/@phila/vue-mapping/src/cyclomedia/Widget.vue","webpack:///./node_modules/@phila/vue-mapping/src/cyclomedia/Widget.vue?ce54","webpack:///./node_modules/@phila/vue-mapping/src/cyclomedia/Widget.vue","webpack:///./node_modules/@phila/vue-mapping/src/cyclomedia/Widget.vue?456b"],"names":["render","_vm","this","_h","$createElement","_c","_self","class","widgetClass","attrs","isMobileOrTablet","popoutAble","style","right","popoutPosition","on","popoutClicked","staticClass","_e","_t","ref","staticRenderFns","name","props","data","computed","fullScreenMapEnabled","fullScreenTopicsEnabled","answer","cyclomediaInitializationBegun","cyclomediaInitializationComplete","cyclomediaActive","pictometryActive","value","locForCyclo","latLngFromMap","latLngFromRecordingClick","mapCenter","navBarOpen","projection4326","projection2272","watch","newCoords","console","StreetSmartApi","targetElement","username","password","apiKey","srs","locale","addressSettings","database","then","latLng","window","newActiveStatus","mounted","updated","methods","setDivWidth","setNewLocation","coords","viewerType","panoramaViewer","closable","maximizable","viewer","widget","bind","catch","sendOrientationToStore","e","xyz","map","component"],"mappings":"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","file":"js/mbmb_pvm_CyclomediaWidget.0aef11a5.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.widgetClass,attrs:{\"id\":\"cyclomedia-container\"}},[(_vm.isMobileOrTablet === false && _vm.popoutAble === true)?_c('div',{style:({ right: _vm.popoutPosition }),attrs:{\"id\":\"inCycloDiv\"},on:{\"click\":_vm.popoutClicked}},[_c('font-awesome-icon',{staticClass:\"popout-icon\",attrs:{\"icon\":\"external-link-alt\"}})],1):_vm._e(),_vm._t(\"default\"),_c('div',{ref:\"cycloviewer\",staticClass:\"panoramaViewerWindow\",attrs:{\"id\":\"cycloviewer\"}})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div\n    id=\"cyclomedia-container\"\n    :class=\"widgetClass\"\n  >\n    <!-- class=\"cyclo-div\" -->\n    <div\n      v-if=\"isMobileOrTablet === false && popoutAble === true\"\n      id=\"inCycloDiv\"\n      :style=\"{ right: popoutPosition }\"\n      @click=\"popoutClicked\"\n    >\n      <font-awesome-icon\n        icon=\"external-link-alt\"\n        class=\"popout-icon\"\n      />\n    </div>\n    <slot />\n    <div\n      id=\"cycloviewer\"\n      ref=\"cycloviewer\"\n      class=\"panoramaViewerWindow\"\n    />\n  </div>\n</template>\n\n<script>\nimport proj4 from 'proj4';\n\nexport default {\n  name: 'CyclomediaWidget',\n  props: [\n    'screenPercent',\n    'orientation',\n  ],\n  data() {\n    return {\n      'docWidth': 0,\n      'divWidth': 0,\n      'popoutPosition': 0,\n    };\n  },\n  computed: {\n    isMobileOrTablet() {\n      return this.$store.state.isMobileOrTablet;\n    },\n    fullScreenMapEnabled() {\n      return this.$store.state.fullScreenMapEnabled;\n    },\n    fullScreenTopicsEnabled() {\n      return this.$store.state.fullScreenTopicsEnabled;\n    },\n    popoutAble() {\n      let answer;\n      if (this.$config.cyclomedia.popoutAble === false) {\n        answer = false;\n      } else {\n        answer = true;\n      }\n      return answer;\n    },\n    cyclomediaInitializationBegun() {\n      return this.$store.state.cyclomedia.initializationBegun;\n    },\n    cyclomediaInitializationComplete() {\n      return this.$store.state.cyclomedia.initializationComplete;\n    },\n    cyclomediaActive() {\n      return this.$store.state.cyclomedia.active;\n    },\n    pictometryActive() {\n      return this.$store.state.pictometry.active;\n    },\n    widgetClass() {\n      let value;\n\n      if (this.$store.state.fullScreenCycloEnabled || this.$props.orientation === 'full-screen') {\n        value = \"medium-24 small-24 height100 fullScreen-cyclo\";\n      } else if (this.$props.orientation === 'vertical') {\n        if (this.$store.state.leftPanel) {\n          value = \"medium-24 small-24 height50\";\n        } else {\n          value = \"medium-12 small-24 height100\";\n        }\n      } else if (this.$props.orientation === 'horizontal') {\n        value = 'small-24 medium-12 height100';\n      } else {\n        if (this.pictometryActive) {\n          value = 'medium-16 large-16 height50 columns';\n        } else {\n          value = 'medium-24 large-24 height50 columns';\n        }\n      }\n\n      if (this.fullScreenTopicsEnabled) {\n        value += ' full-topics-open';\n      }\n\n      // if (this.$props.orientation === 'horizontal') {\n      //   value = 'height50';\n      // } else {\n      //   value = 'cyclo-div';\n      // }\n\n      return value;\n    },\n    locForCyclo() {\n      // console.log('computing locForCyclo');\n      const geocodeData = this.$store.state.geocode.data;\n      // const map = this.$store.state.map.map;\n      if (geocodeData) {\n        return [ geocodeData.geometry.coordinates[1], geocodeData.geometry.coordinates[0] ];\n      }\n      return [];\n    },\n    latLngFromMap() {\n      return this.$store.state.cyclomedia.latLngFromMap;\n    },\n    latLngFromRecordingClick() {\n      return this.$store.state.cyclomedia.latLngFromRecordingClick;\n    },\n    mapCenter() {\n      return this.$store.state.map.center;\n    },\n    navBarOpen() {\n      return this.$store.state.cyclomedia.navBarOpen;\n    },\n    projection4326() {\n      return \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\";\n    },\n    projection2272() {\n      return \"+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs\";\n    },\n    // surfaceCursorOn() {\n    //   return this.$store.state.cyclomedia.surfaceCursorOn;\n    // }\n  },\n  watch: {\n    fullScreenMapEnabled() {\n      this.setDivWidth();\n    },\n    locForCyclo(newCoords) {\n      // console.log('watch locForCyclo is firing, setNewLocation running with newCoords:', newCoords);\n      if (newCoords.length && this.cyclomediaInitializationComplete) {\n        this.setNewLocation(newCoords);\n      }\n    },\n    latLngFromRecordingClick(newCoords) {\n      if (this.cyclomediaInitializationComplete) {\n        if (Array.isArray(newCoords)) {\n          // console.log('it is an array');\n          this.setNewLocation([ newCoords[0], newCoords[1] ]);\n        } else {\n          // console.log('it is not an array');\n          this.setNewLocation([ newCoords.lat, newCoords.lng ]);\n        }\n      }\n    },\n    latLngFromMap(newCoords) {\n      // console.log('watch latLngFromMap is firing, setNewLocation running with newCoords:', newCoords);\n      if (!this.cyclomediaActive && this.cyclomediaInitializationComplete) {\n\n        if (Array.isArray(newCoords)) {\n          // console.log('it is an array');\n          this.setNewLocation([ newCoords[0], newCoords[1] ]);\n        } else {\n          // console.log('it is not an array');\n          this.setNewLocation([ newCoords.lat, newCoords.lng ]);\n        }\n      }\n    },\n    // docWidthComp() {\n    //   console.log('docWidth changed');\n    // }\n    cyclomediaInitializationBegun() {\n      console.log('watch cyclomediaInitializationBegun is running');\n      StreetSmartApi.init({\n        targetElement: this.$refs.cycloviewer,\n        username: this.$config.cyclomedia.username,\n        password: this.$config.cyclomedia.password,\n        apiKey: this.$config.cyclomedia.apiKey,\n        // srs: 'EPSG:4326',\n        srs: 'EPSG:2272',\n        locale: 'en-us',\n        addressSettings: {\n          locale: 'en-us',\n          database: 'CMDatabase',\n        },\n      }).then (\n        () => {\n          // get map center and set location\n          let latLng;\n          // console.log('in cyclomediaInitializationBegun, this.$store.state.cyclomedia.latLngFromMap:', this.$store.state.cyclomedia.latLngFromMap);\n          if (this.$store.state.cyclomedia.latLngFromMap) {\n            latLng = this.$store.state.cyclomedia.latLngFromMap;\n          } else {\n            latLng = [ 39.953338, -75.163471 ];\n          }\n          this.$store.commit('setCyclomediaInitilizationComplete', true);\n          this.setNewLocation([ latLng[0], latLng[1] ]);\n        },\n        err => {\n          console.log('Api: init: failed. Error: ', err);\n        },\n      );\n      window.addEventListener('resize', this.setDivWidth);\n    },\n    cyclomediaActive(newActiveStatus) {\n      console.log('cyclomediaActive watch is firing');\n      this.setDivWidth();\n      if (newActiveStatus === true && this.cyclomediaInitializationComplete) {\n        this.setNewLocation([ this.latLngFromMap[0], this.latLngFromMap[1] ]);\n      }\n    },\n  },\n  mounted() {\n    console.log('cyclomedia widget mounted');\n    this.$emit('cyclomedia-widget-mounted');\n  },\n  updated() {\n    // console.log('cyclomedia updated running');\n    // TODO find a better way to get the image to update and not be stretched\n    // const viewer = this.$store.state.cyclomedia.viewer;\n    if (this.cyclomediaActive) {\n      if (window.panoramaViewer) {\n        window.panoramaViewer.rotateRight(0.0000001);\n      }\n    }\n    this.setDivWidth();\n  },\n  methods: {\n    setDivWidth() {\n      // console.log('Cyclomedia Widget setDivWidth is running');\n      const docWidth = document.body.clientWidth;\n      this.docWidth = docWidth;\n      const el = document.getElementById('cyclomedia-container');\n      const divStyle = window.getComputedStyle(el);\n      const divWidth = parseFloat(divStyle.getPropertyValue('width').replace('px', ''));\n      this.divWidth = divWidth;\n      let appName = this.$store.state.appName;\n      // console.log('setDivWidth is running, appName:', appName, 'docWidth:', docWidth, 'divWidth', divWidth, 'this.$props.screenPercent:', this.$props.screenPercent);\n      let answer;\n      if (appName !== 'pde' && this.fullScreenMapEnabled || appName !== 'pde' && docWidth < 750) {\n        // console.log('setDivWidth is running, first option');\n        answer = docWidth - divWidth + 'px';\n      } else {\n        // console.log('setDivWidth is running, second option');\n        // answer = docWidth - (docWidth/this.$props.screenPercent + divWidth) + 'px';\n        answer = 0;\n      }\n      // console.log('setDivWidth, answer:', answer);\n      this.popoutPosition = answer;\n      // return width;\n    },\n    setNewLocation(coords) {\n      console.log('cyclomedia setNewLocation is running using', coords);\n      if (!coords) {\n        return;\n      }\n      const viewerType = StreetSmartApi.ViewerType.PANORAMA;\n      const coords2272 = proj4(this.projection4326, this.projection2272, [ coords[1], coords[0] ]);\n      console.log('cyclomedia setNewLocation is running using', coords, 'coords2272:', coords2272);\n      // StreetSmartApi.open(center.lng + ',' + center.lat, {\n      // StreetSmartApi.open(coords[1] + ',' + coords[0], {\n      // if (this.cyclomediaInitializationBegun) {\n      StreetSmartApi.open(coords2272[0] + ',' + coords2272[1], {\n        viewerType: viewerType,\n        srs: 'EPSG:2272',\n        // srs: 'EPSG:4326',\n        panoramaViewer: {\n          closable: false,\n          maximizable: false,\n        },\n      }).then (\n        function(result) {\n          // console.log('StreetSmartApi2, result:', result);\n          const viewer = result[0];\n          const widget = this;\n          // console.log('Created component through API:', result, 'widget:', widget, 'viewer:', viewer);\n          if (viewer) {\n            const expanded = viewer.getNavbarExpanded();\n            // console.log('expanded:', expanded);\n            viewer.toggleNavbarExpanded(widget.navBarOpen);\n            viewer.toggleButtonEnabled('panorama.elevation', false);\n            viewer.toggleButtonEnabled('panorama.reportBlurring', false);\n\n            for (let overlay of viewer.props.overlays) {\n              if (overlay.id === 'surfaceCursorLayer') {\n                if (overlay.visible === true) {\n                  viewer.toggleOverlay(overlay);\n                }\n              }\n            }\n\n            if (!this.$config.cyclomedia.measurementAllowed || this.$config.cyclomedia.measurementAllowed === 'false') {\n              StreetSmartApi.removeOverlay('measurementLayer');\n              viewer.toggleButtonEnabled('panorama.measure', false);\n            }\n\n            viewer.on('VIEW_CHANGE', function(e) {\n              // console.log('on VIEW_CHANGE fired, type:', e.type, 'detail:', e.detail);\n              if (e.detail.yaw !== widget.$store.state.cyclomedia.orientation.yaw ||\n                    viewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz\n              ) {\n                // console.log('VIEW_CHANGE first if, widget.$store.state.cyclomedia.orientation.xyz:', widget.$store.state.cyclomedia.orientation.xyz);\n                // console.log('on VIEW_CHANGE fired with yaw change, viewer.props.orientation:', viewer.props.orientation);\n                widget.sendOrientationToStore(e.detail, viewer.props.orientation.xyz);\n              } else if (viewer.getNavbarExpanded() !== this.navBarOpen) {\n                // console.log('VIEW_CHANGE second if');\n                widget.$store.commit('setCyclomediaNavBarOpen', viewer.getNavbarExpanded());\n              }\n            });\n\n            viewer.on('VIEW_LOAD_END', function(e) {\n              // console.log('on VIEW_LOAD_END fired, type:', e.type, 'e:', e, 'viewer.props.orientation:', viewer.props.orientation, 'widget.$store.state.cyclomedia.orientation.xyz:', widget.$store.state.cyclomedia.orientation.xyz);\n              if (viewer.props.orientation.xyz !== widget.$store.state.cyclomedia.orientation.xyz) {\n                // console.log('VIEW_LOAD_END first if');\n                widget.sendOrientationToStore(e, viewer.props.orientation.xyz);\n              } else if (viewer.getNavbarExpanded() !== this.navBarOpen) {\n                // console.log('VIEW_LOAD_END second if');\n                widget.$store.commit('setCyclomediaNavBarOpen', viewer.getNavbarExpanded());\n              }\n            });\n          }\n        }.bind(this),\n      ).catch(\n        function(reason) {\n          // console.log('Failed to create component(s) through API: ' + reason);\n        },\n      );\n\n      // const viewer = this.$store.state.cyclomedia.viewer;\n      // viewer.openByCoordinate(coords);\n    },\n    sendOrientationToStore(e, xyz) {\n      // console.log('sendOrientationToStore is running, xyz:', xyz);\n      if (e.yaw) {\n        this.$store.commit('setCyclomediaYaw', e.yaw);\n        this.$store.commit('setCyclomediaHFov', e.hFov);\n      }\n      const xy = [ xyz[0], xyz[1] ];\n      // console.log('sendOrientationToStore, e:', e, 'xyz:', xyz, 'xy:', xy);\n      const lnglat = proj4(this.projection2272, this.projection4326, xy);\n      // console.log('VIEW_ sendOrientationToStore is running, xyz:', xyz, 'lnglat:', lnglat);\n      this.$nextTick(() => {\n        this.$store.commit('setCyclomediaXyz', lnglat);\n      });\n    },\n    popoutClicked() {\n      // console.log('popoutClicked');\n      let map;\n      if (this.$store.map) {\n        map = this.$store.map;\n      } else {\n        map = this.$store.state.map.map;\n      }\n      const center = map.getCenter();\n      window.open('//cyclomedia.phila.gov/?lat=' + center.lat + '&lng=' + center.lng, '_blank');\n      this.$store.commit('setCyclomediaActive', false);\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n.cyclo-div {\n  height: 100%;\n}\n\n/* #cycloviewer {\n  position: absolute;\n} */\n\n#cyclomedia-container {\n  padding: 0px;\n}\n\n.full-topics-open {\n  display: none;\n}\n\n.height100 {\n  height: 100%;\n}\n\n.height50 {\n  /* padding-top: 50%; */\n  height: 50%;\n}\n\n@media screen and (min-width: 46.875em) {\n  #cyclo-container {\n    display: block;\n  }\n}\n\n@media (max-width: 749px) {\n  .fullScreen-cyclo {\n    height: 100% !important;\n  }\n\n  #cyclo-container {\n    height: 200px;\n  }\n}\n\n#inCycloDiv {\n  /* position: absolute; */\n  position: absolute;\n  /* top: 0px; */\n  right: 40px;\n  /* float: right; */\n  background-color: white;\n  border: 0px solid;\n  width: 30px;\n  height: 30px;\n  cursor:pointer;\n  z-index: 10;\n}\n\n.popout-icon {\n  margin-top: 8.5px;\n  font-size: 15px;\n  margin-left: 8.5px;\n}\n\n.panoramaViewerWindow {\n  display: block;\n  width: 100%;\n  height:100%;\n}\n\n@media screen and (max-width: 46.875em) {\n  .cyclo-container {\n    /* display: none; */\n  }\n}\n\n</style>\n","import mod from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../cache-loader/dist/cjs.js??ref--13-0!../../../../thread-loader/dist/cjs.js!../../../../babel-loader/lib/index.js!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Widget.vue?vue&type=template&id=3330e6b3&scoped=true&\"\nimport script from \"./Widget.vue?vue&type=script&lang=js&\"\nexport * from \"./Widget.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Widget.vue?vue&type=style&index=0&id=3330e6b3&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3330e6b3\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../../mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../../css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../../cache-loader/dist/cjs.js??ref--1-0!../../../../vue-loader/lib/index.js??vue-loader-options!./Widget.vue?vue&type=style&index=0&id=3330e6b3&scoped=true&lang=css&\""],"sourceRoot":""}